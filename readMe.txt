Read me


*********************************************************************
Общая структура проекта

Data - данные. Классы, описания и прочее относительно контента.
По факту тут храняться "материалы" или их описание,
которые будет использовать и собирать в Engine/

Engine - "мотор". Тут храняться циклы, отрисовка графики и прочее.

Src - main цикл.

Прочие файлы не представляют из себя особой ценности.
Diagram  - диаграммы классов. Создано с помощью visual studio.

*********************************************************************

Описание src/src.cpp

Помимо src.cpp в директории src/ ничего нет.
src.cpp исполняемый файл, который будет содержать в себе:
1. разбитие на потоки
2. сохранение
3. выход с определенным кодом
^OLD
NEW:
src.cpp запускает loop().

*********************************************************************

Описание data/
data/ соддержит различные классы, #include, макросы.
В будущем планируется хранить сохранения, элементы графики и готовые
элементы именно в этом разделе.

Текущая структура:
data/entity
Тут представлены базовые классы:
world			- игровой мир
map				- участок игрового мира. Является частью world
creature		- существо. Является сборкой data/entity/parts/
				  + контроллер
item			- предмет. Можно экипировать.
object			- объект. Многофункциональная сущность. Нужны теги.
effect			- по факту объект с AOE эффектом. Контролируется в logic
				  цикле.
/parts/			- классы для наследования.


data/variables
Тут храниться два файла. По факту variables - переменные и #include
includes.h - список всех инклудов.
macro.h - список всех макросов.

*********************************************************************

Описание ai/
Отвечает за искуственный интеллект. Не реализован.
*********************************************************************

logic
отвечает за логику
*********************************************************************
loop
различные циклы.
loop.h - главный цикл. Изначально, src.cpp запускает loop(), после
чего программа крутиться в нем. Инициализация потоков происходит
также в loopBoot()
*********************************************************************

network
отвечает за сеть
*********************************************************************

openGL
графическая часть
Классы:
OGLwindow - основной класс окна. К нему прикручиваются дополнительные модули:
OGLmenu   - отрисовывать меню (нереализовано)
OGLgame   - отрисовывать персонажей (с сылкой на существо / объект)
OGLgrid   - отрисовывать сетку
OGLhud    - отрисовывать hud

*********************************************************************

physic
отвечает за физику

*********************************************************************

engine/engine.h
Основной процесс движка.
int engine(); - основная функция.
*********************************************************************

multiUniverse idea
Игра держиться на одном классе - universe. Это единственный экземпляр
на программу. В нем есть класс коллекции на мир. У каждого мира
есть список коллекций на другие сущности.

*********************************************************************